006b0c80 ENDBR64
006b0c84 SUB RCX,0x1
006b0c88 SUB RSI,0x1
006b0c8c CMP RSI,RCX
006b0c8f CMOVA RSI,RCX
006b0c93 TEST RSI,RSI
006b0c96 JZ 0x006b0cf8
006b0c98 XOR R8D,R8D
006b0c9b NOP dword ptr [RAX + RAX*0x1]
006b0ca0 MOVZX EAX,byte ptr [RDI + R8*0x1]
006b0ca5 CMP byte ptr [RDX + RCX*0x1],AL
006b0ca8 SETZ AL
006b0cab ADD R8,0x1
006b0caf SUB RCX,0x1
006b0cb3 CMP R8,RSI
006b0cb6 JNC 0x006b0cbc
006b0cb8 TEST AL,AL
006b0cba JNZ 0x006b0ca0
006b0cbc MOVZX ESI,byte ptr [RDI + RSI*0x1]
006b0cc0 TEST RCX,RCX
006b0cc3 JNZ 0x006b0cdd
006b0cc5 JMP 0x006b0ce1
006b0cd0 CMP byte ptr [RDX + RCX*0x1],SIL
006b0cd4 SETZ AL
006b0cd7 SUB RCX,0x1
006b0cdb JZ 0x006b0ce1
006b0cdd TEST AL,AL
006b0cdf JNZ 0x006b0cd0
006b0ce1 LEA ECX,[RSI + -0x1]
006b0ce4 CMP CL,0x7d
006b0ce7 JA 0x006b0cf1
006b0ce9 CMP byte ptr [RDX],SIL
006b0cec SETLE DL
006b0cef AND EAX,EDX
006b0cf1 RET
006b0cf8 MOV EAX,0x1
006b0cfd JMP 0x006b0cbc
